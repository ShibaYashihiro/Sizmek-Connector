// const API_KEY = "APPBFP72UCoXx6BG3UwjAxuLd7gPJoHR";
// var url = 'https://adapi.sizmek.com/sas/login/login/'

// // Make a POST request with a JSON payload.
// var data = {
//   'username': 'API.Havas GR.fotis.stefanatos',
//   'password': '56789#$%^&Fghj',
// };

// var options = {
//   'method' : 'post',
//   'contentType': 'application/json',
//   "headers":{ "api-key": API_KEY },
//   "payload": "{username:\"API.Havas GR.fotis.stefanatos\", password: \"56789#$%^&Fghj\"}",
//   'muteHttpExceptions': true
// };

// var response = UrlFetchApp.fetch(url, options);
// Logger.log(response);

var cc = DataStudioApp.createCommunityConnector();
function getAuthType() {
  var AuthTypes = cc.AuthType;
  return cc
    .newAuthTypeResponse()
    .setAuthType(AuthTypes.NONE)
    .build();
}
function getConfig(request) {
  var config = cc.getConfig();
  
  config.newInfo()
    .setId('instructions')
    .setText('Enter Sizmek api url to get data , api token , username and password');
  
  config.newTextInput()
    .setId('api_url')
    .setName('Enter a api url')
    .setHelpText('e.g. https://adapi.sizmek.com/sas/login/login/')
    .setPlaceholder('https://');
  config.newTextInput()
    .setId('api_key')
    .setName('Enter a Api Key')
    .setHelpText('e.g. xxxxxxxxxxxxxxxxx');
  config.newTextInput()
    .setId('username')
    .setName('Enter a username');
  config.newTextInput()
    .setId('password')
    .setName('Enter a username')
    .setType('password');
  
  return config.build();
}
function getFields(request) {
  var cc = DataStudioApp.createCommunityConnector();
  var fields = cc.getFields();
  var types = cc.FieldType;
  var aggregations = cc.AggregationType;
  
  fields.newDimension()
    .setId('username')
    .setType(types.TEXT);
  
  fields.newMetric()
    .setId('version')
    .setType(types.NUMBER);
  
  fields.newDimension()
    .setId('address')
    .setType(types.TEXT);
  
  return fields;
}

function getSchema(request) {
  var fields = getFields(request).build();
  return { schema: fields };
}
function responseToRows(requestedFields, response) {
  // Transform parsed data and filter for requested fields
  return response.map(function(sizmekdata) {
    var row = [];
    requestedFields.asArray().forEach(function (field) {
      switch (field.getId()) {
        case 'username':
          return row.push(sizmekdata.result.user.createdByName);
        case 'version':
          return row.push(sizmekdata.result.user.version);
        case 'address':
          return row.push(sizmekdata.result.user.address);
        default:
          return row.push('');
      }
    });
    return { values: row };
  });
}

function getData(request) {

  var requestedFieldIds = request.fields.map(function(field) {
    return field.name;
  });
  var requestedFields = getFields().forIds(requestedFieldIds);

  // Fetch and parse data from API
  const API_KEY = request.configParams.api_key;
  var url = request.configParams.api_url;

  // Make a POST request with a JSON payload.
  // var data = {
  //   'username': request.configParams.username,
  //   'password': request.configParams.password,
  // };

  var options = {
    'method' : 'post',
    'contentType': 'application/json',
    "headers":{ "api-key": API_KEY },
    "payload": "{username:\""+request.configParams.username+"\", password: \""+request.configParams.password+"\"}",
    'muteHttpExceptions': true
  };

  var response = UrlFetchApp.fetch(url, options);
  // var url = [
  //   'https://api.npmjs.org/downloads/range/',
  //   request.dateRange.startDate,
  //   ':',
  //   request.dateRange.endDate,
  //   '/',
  //   request.configParams.url
  // ];
  // var response = UrlFetchApp.fetch(url.join(''));
  var parsedResponse = JSON.parse(response);
  var rows = responseToRows(requestedFields, parsedResponse);

  return {
    schema: requestedFields.build(),
    rows: rows
  };
}

